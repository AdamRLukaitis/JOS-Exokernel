Dewei Chen
dc3186

Lab 6
------
1)
Currently my implementation is such that if the transmit ring is full, meaning that the next index after tail is the head
but the DD bit shows that it's not been processed yet, the transmit packet function will simply return an error number
indicating that the packet is dropped. However, in output() if the return of the packet send system call indicates that
packet is dropped, it will yield and try resending the same packet again until it succeeds before fetching the next packet.

2)
I implemented the receive packet function to return a -E_PCKT_NONE error when the user requests to receive a packet 
but there is none in the receiving queue. In input.c that calls this function, it yields the process if this error
is received and try querying for a packet again until it receives something. If a packet is received, it returns the 
length of the packet in bytes.

3)
The webpage says "This file came from JOS. Cheesy web page!".

4)
I spent about 30 hrs on this lab.


Challenge:
I modified the E1000 driver to be zero-copy. To do this I added extra functions buf_map in pmap.c and env_buf_map in
env.c. buf_map() handles initial mapping of a buffer region in the kernel address space at boot time. env_buf_map()
is called whenever a new environment is allocated. It locates the physical pages of the buffer region in kernel
space and inserts them into the new environment address space. The buffer region in kernel and user space are both
predefined so the user can copy any data he wishes to share with the kernel. The E1000 initialization function will now
directly set the buffer address in the transmit and receive descriptors to that of the mapped buffer memory region.
I also preserved the API for the transmit and receive functions in case if the user does not want to use the
shared buffer memory and provide his own buffer instead. If a NULL parameter is passed to the transmit/receive 
functions, it is assumed that mapped buffer region will be used.
